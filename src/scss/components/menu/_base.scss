@use "sass:map";

.menu {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
}

// Children

.menu-item,
.menu-link {
  align-items: center;
  display: flex;
}

.menu-link {
  flex: 1 1 auto;
  transition: all $menu-transition-duration;

  &.component-is-selected {
    pointer-events: none;
  }

  &:not(.component-is-selected) {
    &:not(:hover) {
      color: unset;
    }
  }
}

// -- Borders

.menu.component-border-bordered {
  border: $menu-border-width solid $menu-border-color;
  border-radius: $menu-border-radius;

  .menu-item:not(:last-child) {
    border-bottom: $menu-border-width solid $menu-border-color;
  }
}

.menu.component-border-flushed {
  .menu-item:not(:last-child) {
    border-bottom: $menu-border-width solid $menu-border-color;
  }
}

// -- Size

@each $size, $props in $menu-sizes {
  .menu.component-size-#{$size} {
    $padding-x: map.get($props, "padding-x");
    $padding-y: map.get($props, "padding-y");

    .menu-item {
      @include map-props-mixin(
        map.get($component-padding-x-sizing, $padding-x));
      @include map-props-mixin(
        map.get($component-padding-y-sizing, $padding-y));
    }

    .menu-link {
      @include map-props-mixin(
        map.get($component-padding-x-sizing, $padding-x));
      @include map-props-mixin(
        map.get($component-padding-y-sizing, $padding-y));

      $margin-x: map.get(
        map.get($component-padding-x-sizing, $padding-x),
        "padding-left"
      );
      $margin-y: map.get(
        map.get($component-padding-y-sizing, $padding-y),
        "padding-top"
      );

      margin: -#{$margin-y} -#{$margin-x};
    }
  }
}

// Width

@each $width, $props in $menu-widths {
  .menu.component-width-#{$width} {
    $min-width: map.get($props, "min-width");
    $width: map.get($props, "width");

    @include map-props-mixin(
      map.get($component-min-width-sizing, $min-width));
    @include map-props-mixin(
      map.get($component-width-sizing, $width));
  }
}
