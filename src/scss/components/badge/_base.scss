@use "sass:map";

.badge {
  align-items: center;
  border-style: solid;
  border-width: $badge-border-width;
  box-sizing: border-box;
  display: inline-flex;
  justify-content: center;
  position: relative;
}

// Color

@each $color in $component-colors {
  .badge-color-#{$color} {
    @include component-color-mixin($color);
  }
}

// Patern

@each $pattern in $badge-patterns {
  .badge-pattern-#{$pattern} {
    @include badge-pattern-mixin($pattern);
  }
}

// Position

@each $placement in $badge-placements {
  .badge-placement-#{$placement} {
    @include component-placement-mixin($placement);
  }
}

// Shape

@each $shape, $props in $component-shapes {
  .badge-shape-#{$shape} {
    @include map-props-mixin($props);
  }
}

// Size

@each $name, $props in $badge-sizes {
  $gap: map.get($props, "gap");
  $height: map.get($props, "height");
  $font-size: map.get($props, "font-size");
  $min-width: map.get($props, "min-width");
  $padding-x: map.get($props, "padding-x");

  .badge-size-#{$name} {
    @include map-props-mixin(
      map.get($component-font-sizing, $font-size));
    @include map-props-mixin(
      map.get($component-gap-sizing, $gap));
    @include map-props-mixin(
      map.get($component-height-sizing, $height));
    @include map-props-mixin(
      map.get($component-min-width-sizing, $min-width));
    @include map-props-mixin(
      map.get($component-padding-x-sizing, $padding-x));
  }
}
