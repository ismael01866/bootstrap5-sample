@use "sass:map";

.list-group {
  box-sizing: border-box;
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
}

// Color

@each $color in $component-colors {
  .list-group-color-#{$color} {
    @include component-color-mixin($color);
  }
}

// Patern

@each $pattern in $list-group-patterns {
  .list-group-pattern-#{$pattern} {
    @include list-group-pattern-mixin($pattern);
  }
}

// Children

.list-group-item {
  box-sizing: border-box;
  display: flex;

  .list-group-bordered & {
    &:not(:last-child) {
      border-bottom: $list-group-item-border-width solid $list-group-item-border-color;
    }
  }
}

// -- Color

@each $color in $component-colors {
  .list-group-item-color-#{$color} {
    @include component-color-mixin($color);
  }
}

// -- Patern

@each $pattern in $list-group-item-patterns {
  .list-group-item-pattern-#{$pattern} {
    @include list-group-item-pattern-mixin($pattern);
  }
}

// -- Size

@each $size, $props in $list-group-item-sizes {
  .list-group-item-size-#{$size} {
    $padding-x: map.get($props, "padding-x");
    $padding-y: map.get($props, "padding-y");

    @include map-props-mixin(
      map.get($component-padding-x-sizing, $padding-x));
    @include map-props-mixin(
      map.get($component-padding-y-sizing, $padding-y));
  }
}
