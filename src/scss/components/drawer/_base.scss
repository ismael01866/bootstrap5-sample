@use "sass:map";

.drawer {
  @extend %animated;

  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  z-index: $drawer-z-index;

  &.component-placement-top {
    @extend %animation-slide-in-up;

    width: 100% !important;
  }

  &.component-placement-right {
    @extend %animation-slide-in-right;
  }

  &.component-placement-bottom {
    @extend %animation-slide-in-down;

    width: 100% !important;
  }

  &.component-placement-left {
    @extend %animation-slide-in-left;
  }
}

.drawer-backdrop {
  @extend %animated;
  @extend %animation-fade-in;

  background-color: $drawer-backdrop-bg;
  bottom: 0;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: $drawer-backdrop-z-index;
}

.drawer-container {
  position: relative;

  &.closing {
    .drawer {
      &.component-placement-top {
        @extend %animation-slide-out-up;
      }

      &.component-placement-right {
        @extend %animation-slide-out-right;
      }

      &.component-placement-bottom {
        @extend %animation-slide-out-down;
      }

      &.component-placement-left {
        @extend %animation-slide-out-left;
      }
    }

    .drawer-backdrop {
      @extend %animation-fade-out;
    }
  }
}

// Patern

@each $pattern in $badge-patterns {
  .drawer.component-pattern-#{$pattern} {
    @include drawer-pattern-mixin($pattern);
  }
}

// Placement

@each $placement in $drawer-placements {
  .drawer.component-placement-#{$placement} {
    @include drawer-placement-mixin($placement);
  }
}

// Width

@each $width, $props in $drawer-widths {
  .drawer.component-width-#{$width} {
    $min-width: map.get($props, "min-width");
    $width: map.get($props, "width");

    @include map-props-mixin(
      map.get($component-min-width-sizing, $min-width));
    @include map-props-mixin(
      map.get($component-width-sizing, $width));
  }
}
