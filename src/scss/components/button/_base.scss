@use "sass:map";

.button {
  align-items: center;
  border-color: transparent;
  border-style: solid;
  border-width: $button-border-width;
  box-sizing: border-box;
  cursor: pointer;
  display: inline-flex;
  justify-content: center;
  text-decoration: none;
  transition: all $button-transition-duration;

  &:hover {
    text-decoration: none;
  }
}

// Color

@each $color in $component-colors {
  .button-color-#{$color} {
    @include component-color-mixin($color);
  }
}

// Patern

@each $pattern in $button-patterns {
  .button-pattern-#{$pattern} {
    @include button-pattern-mixin($pattern);
  }
}

// Shape

@each $shape in $button-shapes {
  $props: map.get($component-shapes, $shape);

  .button-shape-#{$shape} {
    @include map-props-mixin($props);
  }
}

// Size

@each $size, $props in $button-sizes {
  .button-size-#{$size} {
    $font-size: map.get($props, "font-size");
    $gap: map.get($props, "gap");
    $height: map.get($props, "height");
    $padding-x: map.get($props, "padding-x");

    @include map-props-mixin(
      map.get($component-font-sizing, $font-size));
    @include map-props-mixin(
      map.get($component-gap-sizing, $gap));
    @include map-props-mixin(
      map.get($component-height-sizing, $height));
    @include map-props-mixin(
      map.get($component-padding-x-sizing, $padding-x));
  }

  .button-fixed-size-#{$size} {
    gap: unset;
    padding: unset;

    $height: map.get($props, "height");
    $width: map.get($props, "width");

    @include map-props-mixin(
      map.get($component-height-sizing, $height));
    @include map-props-mixin(
      map.get($component-width-sizing, $width));
  }
}
